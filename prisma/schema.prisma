// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           String       @id
  name         String
  role         Role         @default(USER)
  joinedAt     DateTime     @default(now())
  lastActivity DateTime     @default(now()) @updatedAt
  Option       Option[]
  Logins       Login[]
  LoginToken   LoginToken[]
  verified     Boolean      @default(false)
  ModStat      ModStat[]
  ModClaim     ModClaim[]
}

model Option {
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  raw        String
  key        String
  lastChange DateTime? @updatedAt

  @@id([userId, key])
}

model Login {
  serverId   String
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  LoginToken LoginToken[]

  @@id([serverId, userId])
}

model LoginToken {
  token     String   @id
  createdAt DateTime @default(now())
  serverId  String
  userId    String
  Login     Login    @relation(fields: [serverId, userId], references: [serverId, userId])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  BANNED
  USER
  MODERATOR
  ADMIN
}

model Mod {
  id       String     @id
  name     String
  ModStat  ModStat[]
  ModClaim ModClaim[]
}

model ModStat {
  id        Int       @id @default(autoincrement())
  modId     String
  mod       Mod       @relation(fields: [modId], references: [id], onDelete: Cascade)
  version   String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  modLoader ModLoader
}

model ModClaim {
  id        String
  modId     String
  mod       Mod       @relation(fields: [modId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiKey    String
  plattform Plattform

  @@id([id, plattform])
}

enum ModLoader {
  FORGE
  NEO
  FABRIC
  QUILT
  UNKNOWN
}

enum Plattform {
  CURSEFORGE
  MODRINTH
}
